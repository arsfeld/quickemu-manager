name: SPICE Client - Publish

on:
  push:
    tags:
      - 'spice-client-v*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (no actual publish)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: |
        cd spice-client
        cargo test --all-features
        cargo test --no-default-features

    - name: Check WASM compilation
      run: |
        cd spice-client
        cargo check --target wasm32-unknown-unknown

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: |
        cd spice-client
        cargo fmt -- --check

    - name: Run Clippy
      run: |
        cd spice-client
        cargo clippy -- -W warnings -A missing_docs -A clippy::uninlined_format_args -A clippy::type_complexity -A clippy::too_many_arguments

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: startsWith(github.ref, 'refs/tags/spice-client-v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Verify crate version matches tag
      run: |
        cd spice-client
        TAG_VERSION="${GITHUB_REF#refs/tags/spice-client-v}"
        CRATE_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        if [ "$TAG_VERSION" != "$CRATE_VERSION" ]; then
          echo "Tag version ($TAG_VERSION) does not match crate version ($CRATE_VERSION)"
          exit 1
        fi
        echo "Version check passed: $TAG_VERSION"

    - name: Check crate packaging
      run: |
        cd spice-client
        cargo package --list
        cargo package --no-verify

    - name: Publish crate (dry run)
      if: github.event.inputs.dry_run == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        cd spice-client
        cargo publish --dry-run

    - name: Publish crate
      if: github.event.inputs.dry_run == 'false' || github.event_name == 'push'
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cd spice-client
        cargo publish

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    if: startsWith(github.ref, 'refs/tags/spice-client-v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        VERSION="${GITHUB_REF#refs/tags/spice-client-v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        cd spice-client
        # Extract changelog for this version (customize as needed)
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        echo "Full Changelog: https://github.com/${{ github.repository }}/commits/spice-client-v${{ steps.version.outputs.version }}" >> changelog.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: spice-client v${{ steps.version.outputs.version }}
        body_path: spice-client/changelog.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}