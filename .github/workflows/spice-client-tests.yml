name: SPICE Client - Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'spice-client/**'
      - '.github/workflows/spice-client-tests.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'spice-client/**'
      - '.github/workflows/spice-client-tests.yml'
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code formatting check - Linux only
  format:
    name: Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: |
        cd spice-client
        cargo fmt -- --check

  # Clippy linting - Linux only
  clippy:
    name: Clippy Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-libav \
          libgstrtspserver-1.0-dev libges-1.0-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Run Clippy
      run: |
        cd spice-client
        cargo clippy --all-features

  # Unit tests - Linux only
  unit-tests:
    name: Unit Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-libav \
          libgstrtspserver-1.0-dev libges-1.0-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run unit tests
      run: |
        cd spice-client
        cargo test --lib --all-features
    
    - name: Run doc tests
      run: |
        cd spice-client
        cargo test --doc --all-features

  # Client integration tests  
  client-integration-tests:
    name: Client Integration Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-libav \
          libgstrtspserver-1.0-dev libges-1.0-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run client integration tests
      run: |
        cd spice-client
        cargo test --test client_integration -- --test-threads=1
      timeout-minutes: 5

  # Build verification on all platforms
  build:
    name: Build - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build native
      run: |
        cd spice-client
        cargo build --all-features
    
    - name: Build WASM
      run: |
        cd spice-client
        cargo build --target wasm32-unknown-unknown --all-features

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_integration_tests != 'false'
    services:
      # Using docker-in-docker for integration tests
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-libav \
          libgstrtspserver-1.0-dev libges-1.0-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Docker Compose
      run: |
        sudo apt-get install -y docker-compose netcat-openbsd
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Docker image
      run: |
        cd spice-client
        ./run-integration-tests.sh --build-only
    
    - name: Run integration tests
      run: |
        cd spice-client
        ./run-integration-tests.sh --skip-cleanup
      env:
        RUST_LOG: debug
    
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs
        path: |
          spice-client/test-logs/
          spice-client/container-logs.txt
        retention-days: 7
    
    - name: Cleanup
      if: always()
      run: |
        cd spice-client
        docker-compose -f tests/docker/docker-compose.yml down -v || true

  wasm-tests:
    name: WASM Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-wasm-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run WASM tests
      run: |
        cd spice-client
        wasm-pack test --headless --chrome --firefox

  mock-server-tests:
    name: Mock Server Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-libav \
          libgstrtspserver-1.0-dev libges-1.0-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run mock server tests
      run: |
        cd spice-client
        cargo test --test mocks -- --nocapture
      env:
        RUST_LOG: debug

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-4-dev pkg-config \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-libav \
          libgstrtspserver-1.0-dev libges-1.0-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: |
        cd spice-client
        cargo tarpaulin --out Xml --all-features --ignore-tests
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./spice-client/cobertura.xml
        flags: spice-client
        name: spice-client
        fail_ci_if_error: false

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [format, clippy, unit-tests, client-integration-tests, build, integration-tests, wasm-tests, mock-server-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        if [ "${{ needs.format.result }}" == "success" ]; then
          echo "✅ Code Formatting: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Formatting: ${{ needs.format.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.clippy.result }}" == "success" ]; then
          echo "✅ Clippy: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Clippy: ${{ needs.clippy.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.client-integration-tests.result }}" == "success" ]; then
          echo "✅ Client Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Client Integration Tests: ${{ needs.client-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Build (all platforms): Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.wasm-tests.result }}" == "success" ]; then
          echo "✅ WASM Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ WASM Tests: ${{ needs.wasm-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.mock-server-tests.result }}" == "success" ]; then
          echo "✅ Mock Server Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Mock Server Tests: ${{ needs.mock-server-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Fail if any job failed
        if [ "${{ needs.format.result }}" != "success" ] || \
           [ "${{ needs.clippy.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.client-integration-tests.result }}" != "success" ] || \
           [ "${{ needs.build.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.wasm-tests.result }}" != "success" ] || \
           [ "${{ needs.mock-server-tests.result }}" != "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Some tests failed!**" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
        fi